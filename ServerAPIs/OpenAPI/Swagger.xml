<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServerAPIs</name>
    </assembly>
    <members>
        <member name="T:ServerAPIs.ApplicationController">
            <summary>
            Application configuration management APIs
            </summary>
        </member>
        <member name="M:ServerAPIs.ApplicationController.LoadOneAsync(System.String)">
            <summary>
            Loads the specified application configuration
            </summary>
            <param name="appName">application name</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.LoadAllAsync">
            <summary>
            Loads all application configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.AddAsync(PowerServer.Core.ApplicationConfigurationItem)">
            <summary>
            Adds application configuration 
            </summary>
            <param name="item">The configuration to be added</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.EditAsync(PowerServer.Core.ApplicationConfigurationItem)">
            <summary>
            Edits application configuration
            </summary>
            <param name="item">The configuration to be edited</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.RemoveAsync(System.String)">
            <summary>
            Removes application configuration
            </summary>
            <param name="appName">The name of the application to be removed</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.AddTransactionMappingAsync(System.String,System.String,PowerServer.Core.TransactionConfiguration)">
            <summary>
            Adds transaction mapping
            </summary>
            <param name="appName">Application name</param>
            <param name="transName">Transaction name</param>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.EditTransactionMappingAsync(System.String,System.String,PowerServer.Core.TransactionConfiguration)">
            <summary>
            Edits transaction mapping
            </summary>
            <param name="appName">Application name</param>
            <param name="transName">Transaction name</param>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ApplicationController.RemoveTransactionMappingAsync(System.String,System.String)">
            <summary>
            Removes transaction mapping
            </summary>
            <param name="appName">Application name</param>
            <param name="transName">Transaction name</param>
            <returns></returns>
        </member>
        <member name="T:ServerAPIs.ConnectionController">
            <summary>
            Connection configuration management API
            </summary>
        </member>
        <member name="M:ServerAPIs.ConnectionController.LoadOneAsync(System.String,System.String)">
            <summary>
            Loads the specified connection configuration
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <param name="cacheName">Cache name</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.LoadGroupAsync(System.String)">
            <summary>
            Loads the specified CacheGroup configuration
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.LoadAllAsync">
            <summary>
            Loads all the connection configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.AddOneAsync(System.String,PowerServer.Core.ConnectionConfigurationItem)">
            <summary>
            Adds a connection configuration
            </summary>
            <param name="cacheGroup"> CacheGroup</param>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.AddRangeAsync(System.String,System.Collections.Generic.IEnumerable{PowerServer.Core.ConnectionConfigurationItem})">
            <summary>
            Adds a group of connection configuration
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <param name="items">Items</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.AddGroupAsync(System.String,System.String)">
            <summary>
            Adds a group of empty connection configuration, and copies connection configuration list from the specified CacheGroup
            </summary>
            <param name="cacheGroup">New CacheGroup</param>
            <param name="copyFrom">Old CacheGroup</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.EditAsync(System.String,PowerServer.Core.ConnectionConfigurationItem)">
            <summary>
            Edit a connection configuration
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.RemoveOneAsync(System.String,System.String)">
            <summary>
            Removes a connection configuration
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <param name="cacheName">Cache name</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.ConnectionController.RemoveGroupAsync(System.String)">
            <summary>
            Removes a CacheGroup and the connection configuration in it
            </summary>
            <param name="cacheGroup">CacheGroup</param>
            <returns></returns>
        </member>
        <member name="T:ServerAPIs.LicenseController">
            <summary>
            License information query API
            </summary>
        </member>
        <member name="M:ServerAPIs.LicenseController.LoadLicenseInfoAsync">
            <summary>
            Loads the license information
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.LicenseController.LoadInstanceInfoAsync">
            <summary>
            Loads the instance information
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerAPIs.SessionController">
            <summary>
            Session management API
            </summary>
        </member>
        <member name="M:ServerAPIs.SessionController.LoadAllAsync">
            <summary>
            Loads all session information
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.SessionController.GetSessionCountAsync">
            <summary>
            Gets the session number of the current server instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.SessionController.KillByIdAsync(System.String)">
            <summary>
            Kill a given session
            </summary>
            <param name="sessionId">Session ID</param>
            <returns></returns>
        </member>
        <member name="T:ServerAPIs.StatisticsController">
            <summary>
            Statistics information query API
            </summary>
        </member>
        <member name="M:ServerAPIs.StatisticsController.LoadRequestSummaryStatistics">
            <summary>
            Loads the summary statistics of all requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.StatisticsController.LoadRequestsStatistics(System.Boolean)">
            <summary>
            Loads the detailed statistics of the requests in the specified category
            </summary>
            <param name="failedOnly">Failed requests</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.StatisticsController.LoadTransactionSummaryStatistics">
            <summary>
            Loads transaction statistics
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.StatisticsController.LoadFailedTransactionsStatistics">
            <summary>
            Loads the detailed statistics of failed transactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.StatisticsController.LoadSucceedTransactionsStatistics">
            <summary>
            Loads the detailed statistics of successful transactions
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerAPIs.TransactionController">
            <summary>
            Transaction management API
            </summary>
        </member>
        <member name="M:ServerAPIs.TransactionController.LoadAllAsync">
            <summary>
            Loads all transaction data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.TransactionController.LoadRequestSqlAsync(System.String)">
            <summary>
            Loads the SQL of the request in the specified transaction
            </summary>
            <param name="transactionId">Transaction ID</param>
            <returns></returns>
        </member>
        <member name="M:ServerAPIs.TransactionController.RollbackByIdAsync(System.String,System.String)">
            <summary>
            Rolls back the specified transaction
            </summary>
            <param name="sessionId">Session ID</param>
            <param name="transactionId">Transaction ID</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServerHost.Quickstart.UI.AccountController">
            <summary>
            This sample controller implements a typical login/logout/provision workflow for local and external accounts.
            The login service encapsulates the interactions with the user data store. This data store is in-memory only and cannot be used for production!
            The interaction service provides a way for the UI to communicate with identityserver for validation and context retrieval
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.AccountController.Login(System.String)">
            <summary>
            Entry point into the login workflow
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.AccountController.Login(IdentityServerHost.Quickstart.UI.LoginInputModel,System.String)">
            <summary>
            Handle postback from username/password login
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.AccountController.Logout(System.String)">
            <summary>
            Show logout page
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.AccountController.Logout(IdentityServerHost.Quickstart.UI.LogoutInputModel)">
            <summary>
            Handle logout page postback
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.ExternalController.Challenge(System.String,System.String)">
            <summary>
            initiate roundtrip to external authentication provider
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.ExternalController.Callback">
            <summary>
            Post processing of external authentication
            </summary>
        </member>
        <member name="T:IdentityServerHost.Quickstart.UI.ConsentController">
            <summary>
            This controller processes the consent UI
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.ConsentController.Index(System.String)">
            <summary>
            Shows the consent screen
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.ConsentController.Index(IdentityServerHost.Quickstart.UI.ConsentInputModel)">
            <summary>
            Handles the consent screen postback
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.Extensions.IsNativeClient(IdentityServer4.Models.AuthorizationRequest)">
            <summary>
            Checks if the redirect URI is for a native client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdentityServerHost.Quickstart.UI.GrantsController">
            <summary>
            This sample controller allows a user to revoke grants given to clients
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.GrantsController.Index">
            <summary>
            Show list of grants
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.GrantsController.Revoke(System.String)">
            <summary>
            Handle postback to revoke a client
            </summary>
        </member>
        <member name="M:IdentityServerHost.Quickstart.UI.HomeController.Error(System.String)">
            <summary>
            Shows the error page
            </summary>
        </member>
    </members>
</doc>
